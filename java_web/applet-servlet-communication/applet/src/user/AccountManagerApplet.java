/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccountManagerApplet.java
 *
 * Created on 12-Dec-2010, 03:34:10
 */

package user;

import java.applet.AppletContext;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import pojo.Log;

/**
 *
 * @author pythonee
 */
public class AccountManagerApplet extends javax.swing.JApplet {
    final static Logger log = Logger.getLogger("AccountManagerApplet");
    private int operator = 0;
    
    /** Initializes the applet AccountManagerApplet */
    @Override
    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            log.severe(ex.getMessage());
        }

        setSize(607, 413);
        accountDetailPanel.setSize(544, 300);
        usernameLabel.setHorizontalAlignment(JLabel.RIGHT);

        depositOrWithDrawDialog.setSize(440, 296);
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screen = tk.getScreenSize();
        int width = screen.width;
        int height = screen.height;
        int dwDialogWidth = depositOrWithDrawDialog.getWidth();
        int dwDialogHeight = depositOrWithDrawDialog.getHeight();

        depositOrWithDrawDialog.setLocation((width - dwDialogWidth) / 2,
                (height - dwDialogHeight) / 2);

        depositOrWithDrawDialog.setVisible(false);


        historyDialog.setSize(629, 503);

        int historyDlgWidth = historyDialog.getWidth();
        int historyDlgHeight = historyDialog.getHeight();

        historyDialog.setLocation((width - historyDlgWidth) / 2, (height - historyDlgHeight) / 2);
        historyDialog.setVisible(false);

        errMsgDialog.setSize(400,195);
        errMsgDialog.setVisible(false);

        int errMsgWidth = errMsgDialog.getWidth();
        int errMsgHeight = errMsgDialog.getHeight();

        errMsgDialog.setLocation((width-errMsgWidth)/2, (height-errMsgHeight)/2);

        moneyErrLabel.setVisible(false);
        linkAddress.setVisible(false);
        accountBOX.setVisible(false);

    }

    @Override
    public void start() {

        if (fetchUserDetail()) {
            if (fetchAccountList()) {
                accountBOX.setSelectedIndex(0);
                fetchAccountDetail((String)accountBOX.getSelectedItem());
            }
        }

        log.info("starting");
        
    }

    @Override
    public void stop() {
        depositOrWithDrawDialog.dispose();
        historyDialog.dispose();
        errMsgDialog.dispose();
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        depositOrWithDrawDialog = new javax.swing.JDialog();
        howmuchLabel = new javax.swing.JLabel();
        howmuchTXT = new javax.swing.JTextField();
        operatorCancelBTN = new javax.swing.JButton();
        operatorConfirmBTN = new javax.swing.JButton();
        selectAccountLabel = new javax.swing.JLabel();
        selectAccountBOX = new javax.swing.JComboBox();
        selectAccountBalanceLabel = new javax.swing.JLabel();
        selectAccountBalanceInfoLabel = new javax.swing.JLabel();
        moneyErrLabel = new javax.swing.JLabel();
        historyDialog = new javax.swing.JDialog();
        dialogNameLabel = new javax.swing.JLabel();
        dialogLogoLabel = new javax.swing.JLabel();
        historyPanel = new javax.swing.JPanel();
        historyScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        errMsgDialog = new javax.swing.JDialog();
        errMsg = new javax.swing.JLabel();
        hintLabel = new javax.swing.JLabel();
        linkLabel = new javax.swing.JLabel();
        linkAddress = new javax.swing.JLabel();
        formNameLabel = new javax.swing.JLabel();
        LogoLabel = new javax.swing.JLabel();
        accountBOX = new javax.swing.JComboBox();
        accountDetailPanel = new javax.swing.JPanel();
        accountTitleLabel = new javax.swing.JLabel();
        accountTypeLabel = new javax.swing.JLabel();
        accountBalanceLabel = new javax.swing.JLabel();
        depositLabel = new javax.swing.JButton();
        withDrawBTN = new javax.swing.JButton();
        historyBTN = new javax.swing.JButton();
        accountTitleInfoLabel = new javax.swing.JLabel();
        accountTypeInfoLabel = new javax.swing.JLabel();
        accountBalanceInfoLabel = new javax.swing.JLabel();
        cardNumberLabel = new javax.swing.JLabel();
        cardNumberInfoLabel = new javax.swing.JLabel();
        startDateLabel = new javax.swing.JLabel();
        startDateInfoLabel = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        openAccountLink = new javax.swing.JLabel();

        depositOrWithDrawDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        depositOrWithDrawDialog.setTitle("Deposit or WithDraw");
        depositOrWithDrawDialog.setIconImage(null);
        depositOrWithDrawDialog.setIconImages(null);
        depositOrWithDrawDialog.setModal(true);
        depositOrWithDrawDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                depositOrWithDrawDialogWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                depositOrWithDrawDialogWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                depositOrWithDrawDialogWindowOpened(evt);
            }
        });
        depositOrWithDrawDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        howmuchLabel.setText("How Much:");
        depositOrWithDrawDialog.getContentPane().add(howmuchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 150, -1, -1));

        howmuchTXT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                howmuchTXTFocusGained(evt);
            }
        });
        depositOrWithDrawDialog.getContentPane().add(howmuchTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 145, 142, -1));

        operatorCancelBTN.setText("Cancel");
        operatorCancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorCancelBTNActionPerformed(evt);
            }
        });
        depositOrWithDrawDialog.getContentPane().add(operatorCancelBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 211, -1, -1));

        operatorConfirmBTN.setText("Confirm");
        operatorConfirmBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorConfirmBTNActionPerformed(evt);
            }
        });
        depositOrWithDrawDialog.getContentPane().add(operatorConfirmBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 211, -1, -1));

        selectAccountLabel.setText("Select an Account:");
        depositOrWithDrawDialog.getContentPane().add(selectAccountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 45, -1, -1));

        selectAccountBOX.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectAccountBOXItemStateChanged(evt);
            }
        });
        depositOrWithDrawDialog.getContentPane().add(selectAccountBOX, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 40, -1, -1));

        selectAccountBalanceLabel.setText("Balance:");
        depositOrWithDrawDialog.getContentPane().add(selectAccountBalanceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 99, -1, -1));

        selectAccountBalanceInfoLabel.setText("0");
        depositOrWithDrawDialog.getContentPane().add(selectAccountBalanceInfoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 99, -1, -1));

        moneyErrLabel.setForeground(new java.awt.Color(255, 0, 0));
        depositOrWithDrawDialog.getContentPane().add(moneyErrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 170, -1, -1));

        historyDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        historyDialog.setTitle("History");
        historyDialog.setIconImage(null);
        historyDialog.setIconImages(null);
        historyDialog.setModal(true);

        dialogNameLabel.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 18));
        dialogNameLabel.setText("View History");

        dialogLogoLabel.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 18));
        dialogLogoLabel.setText("E-Banking");

        historyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("History"));

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account", "Operator", "Count", "Date/Time"
            }
        ));
        historyScrollPane1.setViewportView(historyTable);

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(historyScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout historyDialogLayout = new javax.swing.GroupLayout(historyDialog.getContentPane());
        historyDialog.getContentPane().setLayout(historyDialogLayout);
        historyDialogLayout.setHorizontalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(historyPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(historyDialogLayout.createSequentialGroup()
                        .addComponent(dialogNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 419, Short.MAX_VALUE)
                        .addComponent(dialogLogoLabel)))
                .addContainerGap())
        );
        historyDialogLayout.setVerticalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyDialogLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogNameLabel)
                    .addComponent(dialogLogoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(historyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        errMsgDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        errMsgDialog.setTitle("Error");
        errMsgDialog.setIconImage(null);
        errMsgDialog.setIconImages(null);
        errMsgDialog.setModal(true);

        errMsg.setForeground(new java.awt.Color(255, 0, 0));
        errMsg.setText("err_msg");

        hintLabel.setText("You can click the link below to solve this problem:");

        linkLabel.setForeground(new java.awt.Color(0, 0, 255));
        linkLabel.setText("link");
        linkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                linkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                linkLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout errMsgDialogLayout = new javax.swing.GroupLayout(errMsgDialog.getContentPane());
        errMsgDialog.getContentPane().setLayout(errMsgDialogLayout);
        errMsgDialogLayout.setHorizontalGroup(
            errMsgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errMsgDialogLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(errMsgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linkAddress)
                    .addComponent(linkLabel)
                    .addComponent(errMsg)
                    .addComponent(hintLabel))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        errMsgDialogLayout.setVerticalGroup(
            errMsgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errMsgDialogLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(errMsg)
                .addGap(18, 18, 18)
                .addComponent(hintLabel)
                .addGap(18, 18, 18)
                .addComponent(linkLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linkAddress)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        formNameLabel.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 18));
        formNameLabel.setText("Account Manager");

        LogoLabel.setFont(new java.awt.Font("WenQuanYi Micro Hei", 0, 18));
        LogoLabel.setText("E-Banking");

        accountBOX.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                accountBOXItemStateChanged(evt);
            }
        });

        accountDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Accout Detail"));

        accountTitleLabel.setText("Title:");

        accountTypeLabel.setText("Type:");

        accountBalanceLabel.setText("Balance:");

        depositLabel.setText("Deposit");
        depositLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositLabelActionPerformed(evt);
            }
        });

        withDrawBTN.setText("Withdraw");
        withDrawBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withDrawBTNActionPerformed(evt);
            }
        });

        historyBTN.setText("History");
        historyBTN.setPreferredSize(new java.awt.Dimension(77, 30));
        historyBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBTNActionPerformed(evt);
            }
        });

        accountTitleInfoLabel.setText("account title");

        accountTypeInfoLabel.setText("account type");

        accountBalanceInfoLabel.setText("account balance");

        cardNumberLabel.setText("Card Number:");

        cardNumberInfoLabel.setText("0");

        startDateLabel.setText("Start Date:");

        startDateInfoLabel.setText("yyyy-mm-dd");

        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountDetailPanelLayout = new javax.swing.GroupLayout(accountDetailPanel);
        accountDetailPanel.setLayout(accountDetailPanelLayout);
        accountDetailPanelLayout.setHorizontalGroup(
            accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(accountTypeLabel)
                    .addComponent(accountTitleLabel)
                    .addComponent(accountBalanceLabel)
                    .addComponent(cardNumberLabel)
                    .addComponent(startDateLabel))
                .addGap(18, 18, 18)
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDateInfoLabel)
                    .addGroup(accountDetailPanelLayout.createSequentialGroup()
                        .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountBalanceInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(accountTypeInfoLabel)
                                .addComponent(accountTitleInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                        .addGap(216, 216, 216))
                    .addComponent(cardNumberInfoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(withDrawBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(historyBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(deleteBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                .addContainerGap())
        );
        accountDetailPanelLayout.setVerticalGroup(
            accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountTitleLabel)
                    .addComponent(accountTitleInfoLabel)
                    .addComponent(depositLabel))
                .addGap(18, 18, 18)
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountTypeLabel)
                    .addComponent(accountTypeInfoLabel)
                    .addComponent(withDrawBTN))
                .addGap(18, 18, 18)
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountBalanceLabel)
                    .addComponent(accountBalanceInfoLabel)
                    .addComponent(deleteBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountDetailPanelLayout.createSequentialGroup()
                        .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cardNumberLabel)
                            .addComponent(cardNumberInfoLabel))
                        .addGap(18, 18, 18)
                        .addGroup(accountDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateInfoLabel)
                            .addComponent(startDateLabel)))
                    .addComponent(historyBTN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        usernameLabel.setForeground(new java.awt.Color(0, 0, 255));
        usernameLabel.setText("username");
        usernameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usernameLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                usernameLabelMouseExited(evt);
            }
        });

        openAccountLink.setForeground(new java.awt.Color(0, 0, 255));
        openAccountLink.setText("open another account");
        openAccountLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openAccountLinkMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                openAccountLinkMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                openAccountLinkMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accountDetailPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(formNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                        .addGap(317, 317, 317)
                        .addComponent(LogoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(accountBOX, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(235, 235, 235)
                        .addComponent(openAccountLink)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formNameLabel)
                    .addComponent(LogoLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(accountBOX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(openAccountLink))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(accountDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void fetchAccountDetail(String accountTitle){
        
        try {
            URLConnection con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/account");

            OutputStream os = con.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);

            HashMap<String, String> param = new HashMap<String, String>();
            param.put("accountTitle", accountTitle);
            param.put("action", "fetchAccountDetail");

            oos.writeObject(param);
            oos.flush();
            oos.close();


            InputStream is = con.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            HashMap<String,String> account = new HashMap<String, String>();
            account = (HashMap<String, String>)ois.readObject();

            accountTitleInfoLabel.setText(account.get("accountTitle"));
            accountBalanceInfoLabel.setText(account.get("accountBalance"));

            int type = Integer.parseInt(account.get("accountType"));
            
            switch(type){
                case 0:
                    accountTypeInfoLabel.setText("Debit");
                    break;
                case 1:
                    accountTypeInfoLabel.setText("Credit");
                    break;
            }
 
            startDateInfoLabel.setText(account.get("startDate"));
            cardNumberInfoLabel.setText(account.get("cardNumber"));

            log.info("fetch account info");


        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private boolean fetchUserDetail(){

        boolean login = false;
        
        URLConnection con = null;
        try {
            con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/user");
        } catch (Exception ex) {
            log.severe(ex.getMessage());
        }

        if (con != null) {
            try {
                OutputStream os = con.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);

                HashMap<String,String> param = new HashMap<String, String>();
                param.put("action", "fetchUserDetail");

                oos.writeObject(param);
                oos.flush();
                oos.close();

                InputStream is = con.getInputStream();
                ObjectInputStream ois = new ObjectInputStream(is);
                HashMap<String, String> user = (HashMap<String, String>) ois.readObject();

                if (user == null) {
                    usernameLabel.setVisible(false);
                    accountDetailPanel.setVisible(false);
                    accountBOX.setVisible(false);
                    errMsg.setText("You have not login");
                    linkLabel.setText("user login form page");
                    linkAddress.setText("login.jsp");
                    errMsgDialog.setVisible(true);
                    log.info("login first please");
                } else {
                    usernameLabel.setText(user.get("username"));
                    usernameLabel.setVisible(true);
                    login = true;
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UserCenterApplet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserCenterApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        log.info("fetch user detail");

        return login;
    }


    private boolean fetchAccountList(){
        boolean userHaveAccount = false;
        
        try {
            URLConnection con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/account");

            OutputStream os = con.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);

            HashMap<String, String> param = new HashMap<String, String>();
            param.put("action", "getUserAccout");

            oos.writeObject(param);
            oos.flush();
            oos.close();

            InputStream is = con.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);

            ArrayList<String> accountList = (ArrayList<String>)ois.readObject();


            if (accountList.isEmpty()) {
                accountDetailPanel.setVisible(false);
                accountBOX.setVisible(false);
                errMsg.setText("You have not created an account");
                linkLabel.setText("open account form page");
                linkAddress.setText("open.jsp");
                errMsgDialog.setVisible(true);

            }
            else {
                for(String title : accountList){
                    accountBOX.addItem(title);
                    selectAccountBOX.addItem(title);
                }

                accountBOX.setVisible(true);
                accountDetailPanel.setVisible(true);
                userHaveAccount = true;
            }

            log.info("fetching account list");

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserCenterApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UserCenterApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserCenterApplet.class.getName()).log(Level.SEVERE, null, ex);
        }

        return userHaveAccount;
    }

    private void fetchUserHistory(){
        try {
            URLConnection con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/log");

            OutputStream os = con.getOutputStream();

            ObjectOutputStream oos = new ObjectOutputStream(os);

            HashMap<String,String> param = new HashMap<String, String>();
            param.put("action", "fetchUserHistory");
            oos.writeObject(param);
            oos.flush();
            oos.close();

            InputStream is = con.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            
            ArrayList<Log> history = (ArrayList<Log>)ois.readObject();

            DefaultTableModel model = (DefaultTableModel) historyTable.getModel();

            for (Log row : history) {
                String dORw = "+";
                switch (row.getOperator()) {
                    case 0:
                        dORw = "+";
                        break;
                    case 1:
                        dORw = "-";
                        break;
                }
                model.addRow(new Object[]{row.getAccountTitle(),dORw,row.getCount(),row.getTimestamp()});
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void usernameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameLabelMouseClicked
        
        try {
            URL url = new URL(getCodeBase().toString() + "ucenter.jsp");
            AppletContext ac = this.getAppletContext();
            ac.showDocument(url);
            log.info("link jump to ucenter.jsp");
        } catch (MalformedURLException e) {
            log.severe(e.getMessage());
        }
    }//GEN-LAST:event_usernameLabelMouseClicked

    private void usernameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameLabelMouseEntered
        
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_usernameLabelMouseEntered

    private void usernameLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameLabelMouseExited
        
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_usernameLabelMouseExited

    private void depositLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositLabelActionPerformed
        
        operator = 0;
        depositOrWithDrawDialog.setVisible(true);
    }//GEN-LAST:event_depositLabelActionPerformed

    private void withDrawBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withDrawBTNActionPerformed
        
        operator = 1;
        depositOrWithDrawDialog.setVisible(true);
    }//GEN-LAST:event_withDrawBTNActionPerformed

    private void historyBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyBTNActionPerformed

        DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
        int rows = model.getRowCount();

        for(int i = rows-1; i >= 0; i--){
            model.removeRow(i);
        }


        fetchUserHistory();
        
        historyDialog.setVisible(true);
    }//GEN-LAST:event_historyBTNActionPerformed

    private void operatorCancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorCancelBTNActionPerformed
        
        depositOrWithDrawDialog.dispose();
    }//GEN-LAST:event_operatorCancelBTNActionPerformed

    private void operatorConfirmBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorConfirmBTNActionPerformed
        
        boolean commitable = true;

        if (howmuchTXT.getText().length() == 0) {
            moneyErrLabel.setText("Required field cannot be left blank");
            moneyErrLabel.setVisible(true);
            commitable = false;
        }
        else {
            String regex = "^\\d+(\\.\\d+)?$";
            Pattern pattern = Pattern.compile(regex);

            Matcher matcher = pattern.matcher(howmuchTXT.getText());

            if (!matcher.matches()) {
                commitable = false;
                moneyErrLabel.setText("Sorry, only interger or float are allowed");
                moneyErrLabel.setVisible(true);
            }
            else{
                if (operator == 1) {  // withdraw
                    double balance = Double.parseDouble(selectAccountBalanceInfoLabel.getText());
                    double withdraw = Double.parseDouble(howmuchTXT.getText());

                    if (withdraw > balance) {
                        commitable = false;
                        moneyErrLabel.setText("Sorry, but cannot be overdraw");
                        moneyErrLabel.setVisible(true);
                    }
                }
            }            
        }

        if (commitable) {
            try {
                URLConnection con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/account");

                OutputStream os = con.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);

                HashMap<String,String> param = new HashMap<String, String>();

                param.put("accountTitle", (String)selectAccountBOX.getSelectedItem());
                param.put("howmuch", howmuchTXT.getText());
                param.put("operator", operator+"");
                param.put("action", "depositORwithdraw");

                oos.writeObject(param);
                oos.flush();
                oos.close();

                InputStream is = con.getInputStream();
                ObjectInputStream ois = new ObjectInputStream(is);
                int err_code = (Integer)ois.readObject();

                if (err_code == 0) {
                    fetchAccountDetail((String)selectAccountBOX.getSelectedItem());
                    selectAccountBalanceInfoLabel.setText(accountBalanceInfoLabel.getText());
                }

                log.info("depositORwithdraw");

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_operatorConfirmBTNActionPerformed

    private void linkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseClicked
        
        try {
            URL url = new URL(getCodeBase().toString() + linkAddress.getText());
            AppletContext ac = this.getAppletContext();
            ac.showDocument(url);
            log.info("link jump to ucenter.jsp");
        } catch (MalformedURLException e) {
            log.severe(e.getMessage());
        }
    }//GEN-LAST:event_linkLabelMouseClicked

    private void linkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseEntered
        
        errMsgDialog.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_linkLabelMouseEntered

    private void linkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseExited
        
        errMsgDialog.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_linkLabelMouseExited

    private void howmuchTXTFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_howmuchTXTFocusGained
        
        moneyErrLabel.setVisible(false);
    }//GEN-LAST:event_howmuchTXTFocusGained

    private void accountBOXItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_accountBOXItemStateChanged
        
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fetchAccountDetail((String)accountBOX.getSelectedItem());
        }      
    }//GEN-LAST:event_accountBOXItemStateChanged

    private void openAccountLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openAccountLinkMouseClicked
        
        try {
            URL url = new URL(getCodeBase().toString() + "open.jsp");
            AppletContext ac = this.getAppletContext();
            ac.showDocument(url);
            log.info("link jump to ucenter.jsp");
        } catch (MalformedURLException e) {
            log.severe(e.getMessage());
        }
    }//GEN-LAST:event_openAccountLinkMouseClicked

    private void openAccountLinkMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openAccountLinkMouseEntered
        
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_openAccountLinkMouseEntered

    private void openAccountLinkMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openAccountLinkMouseExited
        
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_openAccountLinkMouseExited

    private void depositOrWithDrawDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_depositOrWithDrawDialogWindowClosing

        howmuchTXT.setText("");

    }//GEN-LAST:event_depositOrWithDrawDialogWindowClosing

    private void selectAccountBOXItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectAccountBOXItemStateChanged
        
        accountBOX.setSelectedIndex(selectAccountBOX.getSelectedIndex());
        fetchAccountDetail((String) selectAccountBOX.getSelectedItem());
        selectAccountBalanceInfoLabel.setText(accountBalanceInfoLabel.getText());
    }//GEN-LAST:event_selectAccountBOXItemStateChanged

    private void depositOrWithDrawDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_depositOrWithDrawDialogWindowOpened
        selectAccountBOX.setSelectedIndex(accountBOX.getSelectedIndex());
        selectAccountBalanceInfoLabel.setText(accountBalanceInfoLabel.getText());
    }//GEN-LAST:event_depositOrWithDrawDialogWindowOpened

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        try {
            URLConnection con = ConnectManager.getConnection(getCodeBase(), "/ebank/service/account");

            String accountTitle = (String)accountBOX.getSelectedItem();

            OutputStream os = con.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);

            HashMap<String,String> param = new HashMap<String, String>();
            param.put("accountTitle", accountTitle);
            param.put("action", "deleteAccount");

            oos.writeObject(param);
            oos.flush();
            oos.close();

            InputStream is = con.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);


            int err_code = (Integer)ois.readObject();

            int select = accountBOX.getSelectedIndex();
            accountBOX.removeItemAt(select);

            if (accountBOX.getItemCount() == 0) {
                accountDetailPanel.setVisible(false);
                accountBOX.setVisible(false);
                errMsg.setText("You have not an account now");
                linkLabel.setText("open account form page");
                linkAddress.setText("open.jsp");
                errMsgDialog.setVisible(true);
            } else {
                accountBOX.setSelectedIndex(0);
                fetchAccountDetail((String)accountBOX.getSelectedItem());
            }


        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AccountManagerApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void depositOrWithDrawDialogWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_depositOrWithDrawDialogWindowActivated
        selectAccountBOX.setSelectedIndex(accountBOX.getSelectedIndex());
        selectAccountBalanceInfoLabel.setText(accountBalanceInfoLabel.getText());
    }//GEN-LAST:event_depositOrWithDrawDialogWindowActivated


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LogoLabel;
    private javax.swing.JComboBox accountBOX;
    private javax.swing.JLabel accountBalanceInfoLabel;
    private javax.swing.JLabel accountBalanceLabel;
    private javax.swing.JPanel accountDetailPanel;
    private javax.swing.JLabel accountTitleInfoLabel;
    private javax.swing.JLabel accountTitleLabel;
    private javax.swing.JLabel accountTypeInfoLabel;
    private javax.swing.JLabel accountTypeLabel;
    private javax.swing.JLabel cardNumberInfoLabel;
    private javax.swing.JLabel cardNumberLabel;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton depositLabel;
    private javax.swing.JDialog depositOrWithDrawDialog;
    private javax.swing.JLabel dialogLogoLabel;
    private javax.swing.JLabel dialogNameLabel;
    private javax.swing.JLabel errMsg;
    private javax.swing.JDialog errMsgDialog;
    private javax.swing.JLabel formNameLabel;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JButton historyBTN;
    private javax.swing.JDialog historyDialog;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JScrollPane historyScrollPane1;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel howmuchLabel;
    private javax.swing.JTextField howmuchTXT;
    private javax.swing.JLabel linkAddress;
    private javax.swing.JLabel linkLabel;
    private javax.swing.JLabel moneyErrLabel;
    private javax.swing.JLabel openAccountLink;
    private javax.swing.JButton operatorCancelBTN;
    private javax.swing.JButton operatorConfirmBTN;
    private javax.swing.JComboBox selectAccountBOX;
    private javax.swing.JLabel selectAccountBalanceInfoLabel;
    private javax.swing.JLabel selectAccountBalanceLabel;
    private javax.swing.JLabel selectAccountLabel;
    private javax.swing.JLabel startDateInfoLabel;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JButton withDrawBTN;
    // End of variables declaration//GEN-END:variables

}
