package com.mashup.action;

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.springframework.security.providers.encoding.PasswordEncoder;

import com.mashup.domain.Role;
import com.mashup.domain.User;
import com.mashup.domain.UserRole;
import com.mashup.service.IAdvertiseService;
import com.mashup.service.IUserRoleService;
import com.mashup.service.IUserService;

/**
 * MyEclipse Struts Creation date: 03-26-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class UserAction extends BaseAction {

	IUserService userService;

	IUserRoleService userRoleService;
	IAdvertiseService advertiseService;

	PasswordEncoder md5Encoder;

	public ActionForward register(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		userService = (IUserService) getBean("UserService");
		userRoleService = (IUserRoleService) getBean("UserRoleService");
		md5Encoder = (PasswordEncoder) getBean("md5PasswordEncoder");

		DynaActionForm userForm = (DynaActionForm) form;

		User user = new User();
		user.setUsername(userForm.getString("username"));
		user.setPassword(md5Encoder.encodePassword(userForm
				.getString("password"), userForm.getString("username")));
		user.setEmail(userForm.getString("email"));

		user.setStatus(0);

		userService.insertUser(user);

		User userDomain = (User) (userService.findByExample(user).get(0));
		Role role = new Role();
		role.setRoleId(2);
		role.setRoleName("ROLE_USER");
		role.setDesc("注册用户");
		userRoleService.insertUserRole(new UserRole(userDomain, role));
		userService
				.sendActivateMail(userDomain, userForm.getString("password"));

		return mapping.findForward("index");
	}

	public ActionForward remove(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		return mapping.findForward("index");
	}

	public ActionForward forgotPasswd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		DynaActionForm userForm = (DynaActionForm) form;

		userService = (IUserService) getBean("UserService");

		User user = new User();
		user.setUsername(userForm.getString("username"));
		user.setEmail(userForm.getString("email"));
		List userList = userService.findByExample(user);
		if (userList != null) {
			if (userList.size() != 0) {

				userService.forgotPasswd((User) userList.get(0));
			}
		} else {
			// 提示用户名不存在或邮箱错误
			// TODO HERE
		}

		return mapping.findForward("index");
	}

	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		// TODO Auto-generated method stub
		DynaActionForm userForm = (DynaActionForm) form;

		userService = (IUserService) getBean("UserService");
		User user = new User();
		user.setUsername(userForm.getString("username"));
		user.setPassword(userForm.getString("password"));

		List userList = userService.findByExample(user);
		if (userList != null) {
			if (userList.size() != 0) {
				request.getSession().setAttribute("user", userList.get(0));
			}
		} else {
			// 提示用户名不存在或密码错误
			// TODO HERE
		}
		return mapping.findForward("index");
	}

	public ActionForward quit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		// TODO Auto-generated method stub
		request.getSession().setAttribute("user", null);

		return mapping.findForward("index");
	}

	public ActionForward resetPassword(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		userService = (IUserService) getBean("UserService");
		md5Encoder = (PasswordEncoder) getBean("md5PasswordEncoder");
		DynaActionForm userForm = (DynaActionForm) form;

		User user = getCurrentUser();

		if (md5Encoder.isPasswordValid(user.getPassword(), userForm
				.getString("password"), user.getUsername())) {
			if (userForm.getString("newPassword").equals(
					userForm.getString("newPasswordConfirm"))) {
				user.setPassword(md5Encoder.encodePassword(userForm
						.getString("newPasswordConfirm"), user.getUsername()));
				userService.updateUser(user);
				request.setAttribute("changepwd", "ok");
				// 修改成功时跳转到原页面,但要解决提示成功的问题
			}
		}

		return mapping.findForward("accountManagement");

	}

	public ActionForward getEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub

		User user = getCurrentUser();

		String responseText = "";
		responseText = "{\"email\":\"" + user.getEmail() + "\"}";
		response.getWriter().write(responseText);

		return mapping.findForward("");
	}

	public ActionForward changeEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub

		User user = getCurrentUser();

		String email = request.getParameter("email");
		user.setEmail(email);
		request.getSession().setAttribute("user", user);
		userService = (IUserService) getBean("UserService");
		userService.updateUser(user);
		String responseText = "";
		responseText = "{\"email\":\"" + user.getEmail() + "\"}";
		response.getWriter().write(responseText);

		return mapping.findForward("");
	}

	public ActionForward findUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		// TODO Auto-generated method stub
		userService = (IUserService) getBean("UserService");
		String username = request.getParameter("username");
		User user = new User();
		user.setUsername(username);
		List list = userService.findByExample(user);
		if (list != null && list.size() != 0) {
			response.getWriter().write("yes");
		} else {
			response.getWriter().write("no");
		}
		return mapping.findForward("");
	}

	public ActionForward matchUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		// TODO Auto-generated method stub
		userService = (IUserService) getBean("UserService");
		String username = request.getParameter("username");
		String email = request.getParameter("email");
		User user = new User();
		user.setUsername(username);
		user.setEmail(email);
		List list = userService.findByExample(user);
		if (list != null && list.size() != 0) {
			response.getWriter().write("yes");
		} else {
			response.getWriter().write("no");
		}

		return mapping.findForward("");
	}

	public ActionForward getAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		// TODO Auto-generated method stub
		userService = (IUserService) getBean("UserService");
		List userList = userService.findAll();
		request.setAttribute("userList", userList);
		request.setAttribute("length", userList.size());
		return mapping.findForward("usermgr");
	}

	public ActionForward deleteUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		userService = (IUserService) getBean("UserService");
		String[] boxDelete = request.getParameterValues("boxDelete");
		log.debug("userlength " + boxDelete.length);
		userService.batchRemoveUser(boxDelete);

		List userList = userService.findAll();
		request.setAttribute("userList", userList);
		request.setAttribute("length", userList.size());
		request.setAttribute("deleteUser", "ok");
		return getAll(mapping, form, request, response);
	}

	public ActionForward activateUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		userService = (IUserService) getBean("UserService");
		int userId = Integer.parseInt(request.getParameter("userId"));
		User user = userService.getUserById(userId);
		user.setStatus(1);
		request.setAttribute("username", user.getUsername());
		request.setAttribute("password", request.getParameter("pass"));
		log.debug("用户名:" + user.getUsername() + " 密码：" + user.getPassword());
		userService.updateUser(user);

		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到activateUser.jsp的sidebar的广告
		List adList = advertiseService.findAdByPosition("activateUser.jsp");

		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("activateUser");
	}

	public ActionForward get(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到userCenter.jsp的sidebar的广告
		List adList = advertiseService.findAdByPosition("user/userCenter.jsp");
		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("userCenter");
	}

	public ActionForward getAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到accountManagement.jsp的sidebar的广告
		List adList = advertiseService
				.findAdByPosition("user/accountManagement.jsp");
		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("accountManagement");
	}

	public ActionForward reg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到accountManagement.jsp的sidebar的广告
		List adList = advertiseService.findAdByPosition("register.jsp");
		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("register");
	}

	public ActionForward forgot(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到accountManagement.jsp的sidebar的广告
		List adList = advertiseService.findAdByPosition("forgot.jsp");
		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("forgot");
	}

	public ActionForward log(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		advertiseService = (IAdvertiseService) getBean("AdvertiseService");
		// 将会放到accountManagement.jsp的sidebar的广告
		List adList = advertiseService.findAdByPosition("login.jsp");
		int a = 4;
		if (a > adList.size()) {
			a = adList.size();
		}
		request.setAttribute("adList", adList);

		request.setAttribute("adListLength", a);

		return mapping.findForward("login");
	}
}